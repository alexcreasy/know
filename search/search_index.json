{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"how-to/create-simple-git-server/","text":"title: How-to: Create a Simple Git Server tags: - how-to - sysadmin - git - linux How-to: Create a Simple Git Server Summarized from: https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server SSH Only Let\u2019s walk through setting up SSH access on the server side. In this example, you\u2019ll use the authorized_keys method for authenticating your users. We also assume you\u2019re running a standard Linux distribution like Ubuntu. First, you create a git user account and a .ssh directory for that user. $ sudo adduser git $ su git $ cd $ mkdir .ssh && chmod 700 .ssh $ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys You should note that currently all these users can also log into the server and get a shell as the git user. If you want to restrict that, you will have to change the shell to something else in the /etc/passwd file. You can easily restrict the git user account to only Git-related activities with a limited shell tool called git-shell that comes with Git. If you set this as the git user account\u2019s login shell, then that account can\u2019t have normal shell access to your server. To use this, specify git-shell instead of bash or csh for that account\u2019s login shell. To do so, you must first add the full pathname of the git-shell command to /etc/shells if it\u2019s not already there: $ cat /etc/shells # see if git-shell is already in there. If not... $ which git-shell # make sure git-shell is installed on your system. $ sudo -e /etc/shells # and add the path to git-shell from last command Now you can edit the shell for a user using chsh -s : $ sudo chsh git -s $(which git-shell) Now, the git user can still use the SSH connection to push and pull Git repositories but can\u2019t shell onto the machine. If you try, you\u2019ll see a login rejection like this: $ ssh git@gitserver fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access. Connection to gitserver closed. At this point, users are still able to use SSH port forwarding to access any host the git server is able to reach. If you want to prevent that, you can edit the authorized_keys file and prepend the following options to each key you\u2019d like to restrict: no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty The result should look like this: $ cat ~/.ssh/authorized_keys no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC IicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd LQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ ICUvax2T9va5 gsg-keypair no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG... Now Git network commands will still work just fine but the users won\u2019t be able to get a shell. As the output states, you can also set up a directory in the git user\u2019s home directory that customizes the git-shell command a bit. For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in like that. Run git help shell for more information on customizing the shell.","title":"Create simple git server"},{"location":"how-to/create-simple-git-server/#how-to-create-a-simple-git-server","text":"Summarized from: https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server","title":"How-to: Create a Simple Git Server"},{"location":"how-to/create-simple-git-server/#ssh-only","text":"Let\u2019s walk through setting up SSH access on the server side. In this example, you\u2019ll use the authorized_keys method for authenticating your users. We also assume you\u2019re running a standard Linux distribution like Ubuntu. First, you create a git user account and a .ssh directory for that user. $ sudo adduser git $ su git $ cd $ mkdir .ssh && chmod 700 .ssh $ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys You should note that currently all these users can also log into the server and get a shell as the git user. If you want to restrict that, you will have to change the shell to something else in the /etc/passwd file. You can easily restrict the git user account to only Git-related activities with a limited shell tool called git-shell that comes with Git. If you set this as the git user account\u2019s login shell, then that account can\u2019t have normal shell access to your server. To use this, specify git-shell instead of bash or csh for that account\u2019s login shell. To do so, you must first add the full pathname of the git-shell command to /etc/shells if it\u2019s not already there: $ cat /etc/shells # see if git-shell is already in there. If not... $ which git-shell # make sure git-shell is installed on your system. $ sudo -e /etc/shells # and add the path to git-shell from last command Now you can edit the shell for a user using chsh -s : $ sudo chsh git -s $(which git-shell) Now, the git user can still use the SSH connection to push and pull Git repositories but can\u2019t shell onto the machine. If you try, you\u2019ll see a login rejection like this: $ ssh git@gitserver fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access. Connection to gitserver closed. At this point, users are still able to use SSH port forwarding to access any host the git server is able to reach. If you want to prevent that, you can edit the authorized_keys file and prepend the following options to each key you\u2019d like to restrict: no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty The result should look like this: $ cat ~/.ssh/authorized_keys no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC IicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd LQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ ICUvax2T9va5 gsg-keypair no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG... Now Git network commands will still work just fine but the users won\u2019t be able to get a shell. As the output states, you can also set up a directory in the git user\u2019s home directory that customizes the git-shell command a bit. For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in like that. Run git help shell for more information on customizing the shell.","title":"SSH Only"}]}